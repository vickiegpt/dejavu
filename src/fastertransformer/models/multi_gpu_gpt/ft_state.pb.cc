// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ft_state.proto

#include "ft_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dejavu_ft {
PROTOBUF_CONSTEXPR ResetRequest::ResetRequest(
    ::_pbi::ConstantInitialized) {}
struct ResetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetRequestDefaultTypeInternal() {}
  union {
    ResetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
PROTOBUF_CONSTEXPR ResetResponse::ResetResponse(
    ::_pbi::ConstantInitialized) {}
struct ResetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetResponseDefaultTypeInternal() {}
  union {
    ResetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatRequest::HeartBeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rank_)*/0} {}
struct HeartBeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatRequestDefaultTypeInternal() {}
  union {
    HeartBeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatResponse::HeartBeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reset_)*/false} {}
struct HeartBeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatResponseDefaultTypeInternal() {}
  union {
    HeartBeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
PROTOBUF_CONSTEXPR StartUpInfoRequest::StartUpInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rank_)*/0} {}
struct StartUpInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartUpInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartUpInfoRequestDefaultTypeInternal() {}
  union {
    StartUpInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartUpInfoRequestDefaultTypeInternal _StartUpInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR StartUpInfoResponse::StartUpInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ubatch_global_ids_)*/{}
  , /*decltype(_impl_.ubatch_steps_)*/{}
  , /*decltype(_impl_.prompts_seen_)*/{}
  , /*decltype(_impl_.has_failed_)*/false
  , /*decltype(_impl_.stream_cache_next_)*/false
  , /*decltype(_impl_.stream_cache_prev_)*/false} {}
struct StartUpInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartUpInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartUpInfoResponseDefaultTypeInternal() {}
  union {
    StartUpInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartUpInfoResponseDefaultTypeInternal _StartUpInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR CacheRequest::CacheRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rank_)*/0
  , /*decltype(_impl_.ubatch_id_)*/0
  , /*decltype(_impl_.step_)*/0} {}
struct CacheRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheRequestDefaultTypeInternal() {}
  union {
    CacheRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheRequestDefaultTypeInternal _CacheRequest_default_instance_;
PROTOBUF_CONSTEXPR CacheResponse::CacheResponse(
    ::_pbi::ConstantInitialized) {}
struct CacheResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CacheResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CacheResponseDefaultTypeInternal() {}
  union {
    CacheResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CacheResponseDefaultTypeInternal _CacheResponse_default_instance_;
PROTOBUF_CONSTEXPR TokenRequest::TokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tokens_)*/{}
  , /*decltype(_impl_.ubatch_id_)*/0
  , /*decltype(_impl_.pp_id_)*/0} {}
struct TokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenRequestDefaultTypeInternal() {}
  union {
    TokenRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenRequestDefaultTypeInternal _TokenRequest_default_instance_;
PROTOBUF_CONSTEXPR TokenResponse::TokenResponse(
    ::_pbi::ConstantInitialized) {}
struct TokenResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenResponseDefaultTypeInternal() {}
  union {
    TokenResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenResponseDefaultTypeInternal _TokenResponse_default_instance_;
PROTOBUF_CONSTEXPR UbatchFinishedRequest::UbatchFinishedRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ubatch_id_)*/{}
  , /*decltype(_impl_.pp_id_)*/{}
  , /*decltype(_impl_.rank_)*/0} {}
struct UbatchFinishedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UbatchFinishedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UbatchFinishedRequestDefaultTypeInternal() {}
  union {
    UbatchFinishedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UbatchFinishedRequestDefaultTypeInternal _UbatchFinishedRequest_default_instance_;
PROTOBUF_CONSTEXPR UbatchFinishedResponse::UbatchFinishedResponse(
    ::_pbi::ConstantInitialized) {}
struct UbatchFinishedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UbatchFinishedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UbatchFinishedResponseDefaultTypeInternal() {}
  union {
    UbatchFinishedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UbatchFinishedResponseDefaultTypeInternal _UbatchFinishedResponse_default_instance_;
PROTOBUF_CONSTEXPR IsReadyRequest::IsReadyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rank_)*/0} {}
struct IsReadyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsReadyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsReadyRequestDefaultTypeInternal() {}
  union {
    IsReadyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsReadyRequestDefaultTypeInternal _IsReadyRequest_default_instance_;
PROTOBUF_CONSTEXPR IsReadyResponse::IsReadyResponse(
    ::_pbi::ConstantInitialized) {}
struct IsReadyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsReadyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsReadyResponseDefaultTypeInternal() {}
  union {
    IsReadyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsReadyResponseDefaultTypeInternal _IsReadyResponse_default_instance_;
PROTOBUF_CONSTEXPR IsRestartRequest::IsRestartRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rank_)*/0} {}
struct IsRestartRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsRestartRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsRestartRequestDefaultTypeInternal() {}
  union {
    IsRestartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsRestartRequestDefaultTypeInternal _IsRestartRequest_default_instance_;
PROTOBUF_CONSTEXPR IsRestartResponse::IsRestartResponse(
    ::_pbi::ConstantInitialized) {}
struct IsRestartResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsRestartResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsRestartResponseDefaultTypeInternal() {}
  union {
    IsRestartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsRestartResponseDefaultTypeInternal _IsRestartResponse_default_instance_;
}  // namespace dejavu_ft
static ::_pb::Metadata file_level_metadata_ft_5fstate_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ft_5fstate_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ft_5fstate_2eproto = nullptr;

const uint32_t TableStruct_ft_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::ResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::HeartBeatRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::HeartBeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::HeartBeatRequest, _impl_.rank_),
  0,
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::HeartBeatResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::HeartBeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::HeartBeatResponse, _impl_.reset_),
  0,
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoRequest, _impl_.rank_),
  0,
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_.has_failed_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_.stream_cache_next_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_.stream_cache_prev_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_.ubatch_global_ids_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_.ubatch_steps_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::StartUpInfoResponse, _impl_.prompts_seen_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::CacheRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::CacheRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::CacheRequest, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::CacheRequest, _impl_.ubatch_id_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::CacheRequest, _impl_.step_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::CacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::TokenRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::TokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::TokenRequest, _impl_.ubatch_id_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::TokenRequest, _impl_.pp_id_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::TokenRequest, _impl_.tokens_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::TokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::UbatchFinishedRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::UbatchFinishedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::UbatchFinishedRequest, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::UbatchFinishedRequest, _impl_.ubatch_id_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::UbatchFinishedRequest, _impl_.pp_id_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::UbatchFinishedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsReadyRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsReadyRequest, _impl_.rank_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsReadyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsRestartRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsRestartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsRestartRequest, _impl_.rank_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dejavu_ft::IsRestartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dejavu_ft::ResetRequest)},
  { 6, -1, -1, sizeof(::dejavu_ft::ResetResponse)},
  { 12, 19, -1, sizeof(::dejavu_ft::HeartBeatRequest)},
  { 20, 27, -1, sizeof(::dejavu_ft::HeartBeatResponse)},
  { 28, 35, -1, sizeof(::dejavu_ft::StartUpInfoRequest)},
  { 36, 48, -1, sizeof(::dejavu_ft::StartUpInfoResponse)},
  { 54, 63, -1, sizeof(::dejavu_ft::CacheRequest)},
  { 66, -1, -1, sizeof(::dejavu_ft::CacheResponse)},
  { 72, 81, -1, sizeof(::dejavu_ft::TokenRequest)},
  { 84, -1, -1, sizeof(::dejavu_ft::TokenResponse)},
  { 90, 99, -1, sizeof(::dejavu_ft::UbatchFinishedRequest)},
  { 102, -1, -1, sizeof(::dejavu_ft::UbatchFinishedResponse)},
  { 108, 115, -1, sizeof(::dejavu_ft::IsReadyRequest)},
  { 116, -1, -1, sizeof(::dejavu_ft::IsReadyResponse)},
  { 122, 129, -1, sizeof(::dejavu_ft::IsRestartRequest)},
  { 130, -1, -1, sizeof(::dejavu_ft::IsRestartResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dejavu_ft::_ResetRequest_default_instance_._instance,
  &::dejavu_ft::_ResetResponse_default_instance_._instance,
  &::dejavu_ft::_HeartBeatRequest_default_instance_._instance,
  &::dejavu_ft::_HeartBeatResponse_default_instance_._instance,
  &::dejavu_ft::_StartUpInfoRequest_default_instance_._instance,
  &::dejavu_ft::_StartUpInfoResponse_default_instance_._instance,
  &::dejavu_ft::_CacheRequest_default_instance_._instance,
  &::dejavu_ft::_CacheResponse_default_instance_._instance,
  &::dejavu_ft::_TokenRequest_default_instance_._instance,
  &::dejavu_ft::_TokenResponse_default_instance_._instance,
  &::dejavu_ft::_UbatchFinishedRequest_default_instance_._instance,
  &::dejavu_ft::_UbatchFinishedResponse_default_instance_._instance,
  &::dejavu_ft::_IsReadyRequest_default_instance_._instance,
  &::dejavu_ft::_IsReadyResponse_default_instance_._instance,
  &::dejavu_ft::_IsRestartRequest_default_instance_._instance,
  &::dejavu_ft::_IsRestartResponse_default_instance_._instance,
};

const char descriptor_table_protodef_ft_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016ft_state.proto\022\tdejavu_ft\"\016\n\014ResetRequ"
  "est\"\017\n\rResetResponse\" \n\020HeartBeatRequest"
  "\022\014\n\004rank\030\001 \002(\005\"\"\n\021HeartBeatResponse\022\r\n\005r"
  "eset\030\001 \002(\010\"\"\n\022StartUpInfoRequest\022\014\n\004rank"
  "\030\001 \002(\005\"\246\001\n\023StartUpInfoResponse\022\022\n\nhas_fa"
  "iled\030\001 \002(\010\022\031\n\021stream_cache_next\030\002 \002(\010\022\031\n"
  "\021stream_cache_prev\030\003 \002(\010\022\031\n\021ubatch_globa"
  "l_ids\030\004 \003(\005\022\024\n\014ubatch_steps\030\005 \003(\005\022\024\n\014pro"
  "mpts_seen\030\006 \003(\005\"=\n\014CacheRequest\022\014\n\004rank\030"
  "\001 \002(\005\022\021\n\tubatch_id\030\002 \002(\005\022\014\n\004step\030\003 \002(\005\"\017"
  "\n\rCacheResponse\"@\n\014TokenRequest\022\021\n\tubatc"
  "h_id\030\001 \002(\005\022\r\n\005pp_id\030\002 \002(\005\022\016\n\006tokens\030\003 \003("
  "\005\"\017\n\rTokenResponse\"G\n\025UbatchFinishedRequ"
  "est\022\014\n\004rank\030\001 \002(\005\022\021\n\tubatch_id\030\002 \003(\005\022\r\n\005"
  "pp_id\030\003 \003(\005\"\030\n\026UbatchFinishedResponse\"\036\n"
  "\016IsReadyRequest\022\014\n\004rank\030\001 \002(\005\"\021\n\017IsReady"
  "Response\" \n\020IsRestartRequest\022\014\n\004rank\030\001 \002"
  "(\005\"\023\n\021IsRestartResponse2\330\004\n\nController\022L"
  "\n\rSendHeartbeat\022\033.dejavu_ft.HeartBeatReq"
  "uest\032\034.dejavu_ft.HeartBeatResponse\"\000\022C\n\014"
  "SendCacheAck\022\027.dejavu_ft.CacheRequest\032\030."
  "dejavu_ft.CacheResponse\"\000\022@\n\tSendToken\022\027"
  ".dejavu_ft.TokenRequest\032\030.dejavu_ft.Toke"
  "nResponse\"\000\022J\n\007GetInfo\022\035.dejavu_ft.Start"
  "UpInfoRequest\032\036.dejavu_ft.StartUpInfoRes"
  "ponse\"\000\022<\n\005Reset\022\027.dejavu_ft.ResetReques"
  "t\032\030.dejavu_ft.ResetResponse\"\000\022[\n\022MarkUba"
  "tchFinished\022 .dejavu_ft.UbatchFinishedRe"
  "quest\032!.dejavu_ft.UbatchFinishedResponse"
  "\"\000\022B\n\007IsReady\022\031.dejavu_ft.IsReadyRequest"
  "\032\032.dejavu_ft.IsReadyResponse\"\000\022J\n\013MarkRe"
  "start\022\033.dejavu_ft.IsRestartRequest\032\034.dej"
  "avu_ft.IsRestartResponse\"\000"
  ;
static ::_pbi::once_flag descriptor_table_ft_5fstate_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ft_5fstate_2eproto = {
    false, false, 1306, descriptor_table_protodef_ft_5fstate_2eproto,
    "ft_state.proto",
    &descriptor_table_ft_5fstate_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_ft_5fstate_2eproto::offsets,
    file_level_metadata_ft_5fstate_2eproto, file_level_enum_descriptors_ft_5fstate_2eproto,
    file_level_service_descriptors_ft_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ft_5fstate_2eproto_getter() {
  return &descriptor_table_ft_5fstate_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ft_5fstate_2eproto(&descriptor_table_ft_5fstate_2eproto);
namespace dejavu_ft {

// ===================================================================

class ResetRequest::_Internal {
 public:
};

ResetRequest::ResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResetRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.ResetRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[0]);
}

// ===================================================================

class ResetResponse::_Internal {
 public:
};

ResetResponse::ResetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.ResetResponse)
}
ResetResponse::ResetResponse(const ResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResetResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.ResetResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[1]);
}

// ===================================================================

class HeartBeatRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartBeatRequest>()._impl_._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

HeartBeatRequest::HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.HeartBeatRequest)
}
HeartBeatRequest::HeartBeatRequest(const HeartBeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.HeartBeatRequest)
}

inline void HeartBeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){0}
  };
}

HeartBeatRequest::~HeartBeatRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.HeartBeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.HeartBeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.HeartBeatRequest)
  return target;
}

size_t HeartBeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.HeartBeatRequest)
  size_t total_size = 0;

  // required int32 rank = 1;
  if (_internal_has_rank()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatRequest::GetClassData() const { return &_class_data_; }


void HeartBeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartBeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.HeartBeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank()) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatRequest::CopyFrom(const HeartBeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.HeartBeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void HeartBeatRequest::InternalSwap(HeartBeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rank_, other->_impl_.rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[2]);
}

// ===================================================================

class HeartBeatResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartBeatResponse>()._impl_._has_bits_);
  static void set_has_reset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

HeartBeatResponse::HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.HeartBeatResponse)
}
HeartBeatResponse::HeartBeatResponse(const HeartBeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reset_ = from._impl_.reset_;
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.HeartBeatResponse)
}

inline void HeartBeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reset_){false}
  };
}

HeartBeatResponse::~HeartBeatResponse() {
  // @@protoc_insertion_point(destructor:dejavu_ft.HeartBeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.HeartBeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reset_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool reset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_reset(&has_bits);
          _impl_.reset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.HeartBeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool reset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_reset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.HeartBeatResponse)
  return target;
}

size_t HeartBeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.HeartBeatResponse)
  size_t total_size = 0;

  // required bool reset = 1;
  if (_internal_has_reset()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatResponse::GetClassData() const { return &_class_data_; }


void HeartBeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartBeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.HeartBeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reset()) {
    _this->_internal_set_reset(from._internal_reset());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatResponse::CopyFrom(const HeartBeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.HeartBeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void HeartBeatResponse::InternalSwap(HeartBeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.reset_, other->_impl_.reset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[3]);
}

// ===================================================================

class StartUpInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StartUpInfoRequest>()._impl_._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StartUpInfoRequest::StartUpInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.StartUpInfoRequest)
}
StartUpInfoRequest::StartUpInfoRequest(const StartUpInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartUpInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.StartUpInfoRequest)
}

inline void StartUpInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){0}
  };
}

StartUpInfoRequest::~StartUpInfoRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.StartUpInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartUpInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartUpInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartUpInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.StartUpInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartUpInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartUpInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.StartUpInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.StartUpInfoRequest)
  return target;
}

size_t StartUpInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.StartUpInfoRequest)
  size_t total_size = 0;

  // required int32 rank = 1;
  if (_internal_has_rank()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartUpInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartUpInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartUpInfoRequest::GetClassData() const { return &_class_data_; }


void StartUpInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartUpInfoRequest*>(&to_msg);
  auto& from = static_cast<const StartUpInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.StartUpInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank()) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartUpInfoRequest::CopyFrom(const StartUpInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.StartUpInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpInfoRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StartUpInfoRequest::InternalSwap(StartUpInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rank_, other->_impl_.rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartUpInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[4]);
}

// ===================================================================

class StartUpInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StartUpInfoResponse>()._impl_._has_bits_);
  static void set_has_has_failed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_cache_next(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stream_cache_prev(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

StartUpInfoResponse::StartUpInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.StartUpInfoResponse)
}
StartUpInfoResponse::StartUpInfoResponse(const StartUpInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StartUpInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ubatch_global_ids_){from._impl_.ubatch_global_ids_}
    , decltype(_impl_.ubatch_steps_){from._impl_.ubatch_steps_}
    , decltype(_impl_.prompts_seen_){from._impl_.prompts_seen_}
    , decltype(_impl_.has_failed_){}
    , decltype(_impl_.stream_cache_next_){}
    , decltype(_impl_.stream_cache_prev_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.has_failed_, &from._impl_.has_failed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stream_cache_prev_) -
    reinterpret_cast<char*>(&_impl_.has_failed_)) + sizeof(_impl_.stream_cache_prev_));
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.StartUpInfoResponse)
}

inline void StartUpInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ubatch_global_ids_){arena}
    , decltype(_impl_.ubatch_steps_){arena}
    , decltype(_impl_.prompts_seen_){arena}
    , decltype(_impl_.has_failed_){false}
    , decltype(_impl_.stream_cache_next_){false}
    , decltype(_impl_.stream_cache_prev_){false}
  };
}

StartUpInfoResponse::~StartUpInfoResponse() {
  // @@protoc_insertion_point(destructor:dejavu_ft.StartUpInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartUpInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ubatch_global_ids_.~RepeatedField();
  _impl_.ubatch_steps_.~RepeatedField();
  _impl_.prompts_seen_.~RepeatedField();
}

void StartUpInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartUpInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.StartUpInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ubatch_global_ids_.Clear();
  _impl_.ubatch_steps_.Clear();
  _impl_.prompts_seen_.Clear();
  ::memset(&_impl_.has_failed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stream_cache_prev_) -
      reinterpret_cast<char*>(&_impl_.has_failed_)) + sizeof(_impl_.stream_cache_prev_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartUpInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool has_failed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_has_failed(&has_bits);
          _impl_.has_failed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool stream_cache_next = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stream_cache_next(&has_bits);
          _impl_.stream_cache_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool stream_cache_prev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stream_cache_prev(&has_bits);
          _impl_.stream_cache_prev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ubatch_global_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ubatch_global_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ubatch_global_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ubatch_steps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ubatch_steps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ubatch_steps(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 prompts_seen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_prompts_seen(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_prompts_seen(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StartUpInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.StartUpInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool has_failed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_failed(), target);
  }

  // required bool stream_cache_next = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_stream_cache_next(), target);
  }

  // required bool stream_cache_prev = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_stream_cache_prev(), target);
  }

  // repeated int32 ubatch_global_ids = 4;
  for (int i = 0, n = this->_internal_ubatch_global_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ubatch_global_ids(i), target);
  }

  // repeated int32 ubatch_steps = 5;
  for (int i = 0, n = this->_internal_ubatch_steps_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ubatch_steps(i), target);
  }

  // repeated int32 prompts_seen = 6;
  for (int i = 0, n = this->_internal_prompts_seen_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_prompts_seen(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.StartUpInfoResponse)
  return target;
}

size_t StartUpInfoResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dejavu_ft.StartUpInfoResponse)
  size_t total_size = 0;

  if (_internal_has_has_failed()) {
    // required bool has_failed = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_cache_next()) {
    // required bool stream_cache_next = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_stream_cache_prev()) {
    // required bool stream_cache_prev = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t StartUpInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.StartUpInfoResponse)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool has_failed = 1;
    total_size += 1 + 1;

    // required bool stream_cache_next = 2;
    total_size += 1 + 1;

    // required bool stream_cache_prev = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ubatch_global_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ubatch_global_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ubatch_global_ids_size());
    total_size += data_size;
  }

  // repeated int32 ubatch_steps = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ubatch_steps_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ubatch_steps_size());
    total_size += data_size;
  }

  // repeated int32 prompts_seen = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.prompts_seen_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_prompts_seen_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartUpInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StartUpInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartUpInfoResponse::GetClassData() const { return &_class_data_; }


void StartUpInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StartUpInfoResponse*>(&to_msg);
  auto& from = static_cast<const StartUpInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.StartUpInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ubatch_global_ids_.MergeFrom(from._impl_.ubatch_global_ids_);
  _this->_impl_.ubatch_steps_.MergeFrom(from._impl_.ubatch_steps_);
  _this->_impl_.prompts_seen_.MergeFrom(from._impl_.prompts_seen_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.has_failed_ = from._impl_.has_failed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stream_cache_next_ = from._impl_.stream_cache_next_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.stream_cache_prev_ = from._impl_.stream_cache_prev_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartUpInfoResponse::CopyFrom(const StartUpInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.StartUpInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpInfoResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StartUpInfoResponse::InternalSwap(StartUpInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ubatch_global_ids_.InternalSwap(&other->_impl_.ubatch_global_ids_);
  _impl_.ubatch_steps_.InternalSwap(&other->_impl_.ubatch_steps_);
  _impl_.prompts_seen_.InternalSwap(&other->_impl_.prompts_seen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartUpInfoResponse, _impl_.stream_cache_prev_)
      + sizeof(StartUpInfoResponse::_impl_.stream_cache_prev_)
      - PROTOBUF_FIELD_OFFSET(StartUpInfoResponse, _impl_.has_failed_)>(
          reinterpret_cast<char*>(&_impl_.has_failed_),
          reinterpret_cast<char*>(&other->_impl_.has_failed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartUpInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[5]);
}

// ===================================================================

class CacheRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CacheRequest>()._impl_._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ubatch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CacheRequest::CacheRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.CacheRequest)
}
CacheRequest::CacheRequest(const CacheRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CacheRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.ubatch_id_){}
    , decltype(_impl_.step_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.rank_, &from._impl_.rank_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.step_));
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.CacheRequest)
}

inline void CacheRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){0}
    , decltype(_impl_.ubatch_id_){0}
    , decltype(_impl_.step_){0}
  };
}

CacheRequest::~CacheRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.CacheRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CacheRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CacheRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CacheRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.CacheRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.rank_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.step_) -
        reinterpret_cast<char*>(&_impl_.rank_)) + sizeof(_impl_.step_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CacheRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 ubatch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ubatch_id(&has_bits);
          _impl_.ubatch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 step = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_step(&has_bits);
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CacheRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.CacheRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // required int32 ubatch_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ubatch_id(), target);
  }

  // required int32 step = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.CacheRequest)
  return target;
}

size_t CacheRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dejavu_ft.CacheRequest)
  size_t total_size = 0;

  if (_internal_has_rank()) {
    // required int32 rank = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }

  if (_internal_has_ubatch_id()) {
    // required int32 ubatch_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ubatch_id());
  }

  if (_internal_has_step()) {
    // required int32 step = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step());
  }

  return total_size;
}
size_t CacheRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.CacheRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 rank = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());

    // required int32 ubatch_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ubatch_id());

    // required int32 step = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_step());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CacheRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheRequest::GetClassData() const { return &_class_data_; }


void CacheRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CacheRequest*>(&to_msg);
  auto& from = static_cast<const CacheRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.CacheRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ubatch_id_ = from._impl_.ubatch_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.step_ = from._impl_.step_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CacheRequest::CopyFrom(const CacheRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.CacheRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CacheRequest::InternalSwap(CacheRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CacheRequest, _impl_.step_)
      + sizeof(CacheRequest::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(CacheRequest, _impl_.rank_)>(
          reinterpret_cast<char*>(&_impl_.rank_),
          reinterpret_cast<char*>(&other->_impl_.rank_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CacheRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[6]);
}

// ===================================================================

class CacheResponse::_Internal {
 public:
};

CacheResponse::CacheResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.CacheResponse)
}
CacheResponse::CacheResponse(const CacheResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CacheResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.CacheResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CacheResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CacheResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CacheResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[7]);
}

// ===================================================================

class TokenRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<TokenRequest>()._impl_._has_bits_);
  static void set_has_ubatch_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pp_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TokenRequest::TokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.TokenRequest)
}
TokenRequest::TokenRequest(const TokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tokens_){from._impl_.tokens_}
    , decltype(_impl_.ubatch_id_){}
    , decltype(_impl_.pp_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ubatch_id_, &from._impl_.ubatch_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pp_id_) -
    reinterpret_cast<char*>(&_impl_.ubatch_id_)) + sizeof(_impl_.pp_id_));
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.TokenRequest)
}

inline void TokenRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tokens_){arena}
    , decltype(_impl_.ubatch_id_){0}
    , decltype(_impl_.pp_id_){0}
  };
}

TokenRequest::~TokenRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.TokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tokens_.~RepeatedField();
}

void TokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.TokenRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tokens_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.ubatch_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pp_id_) -
        reinterpret_cast<char*>(&_impl_.ubatch_id_)) + sizeof(_impl_.pp_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 ubatch_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ubatch_id(&has_bits);
          _impl_.ubatch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 pp_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pp_id(&has_bits);
          _impl_.pp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tokens(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_tokens(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TokenRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.TokenRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 ubatch_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ubatch_id(), target);
  }

  // required int32 pp_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pp_id(), target);
  }

  // repeated int32 tokens = 3;
  for (int i = 0, n = this->_internal_tokens_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tokens(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.TokenRequest)
  return target;
}

size_t TokenRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dejavu_ft.TokenRequest)
  size_t total_size = 0;

  if (_internal_has_ubatch_id()) {
    // required int32 ubatch_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ubatch_id());
  }

  if (_internal_has_pp_id()) {
    // required int32 pp_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pp_id());
  }

  return total_size;
}
size_t TokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.TokenRequest)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 ubatch_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ubatch_id());

    // required int32 pp_id = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pp_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 tokens = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.tokens_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tokens_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenRequest::GetClassData() const { return &_class_data_; }


void TokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TokenRequest*>(&to_msg);
  auto& from = static_cast<const TokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.TokenRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tokens_.MergeFrom(from._impl_.tokens_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ubatch_id_ = from._impl_.ubatch_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pp_id_ = from._impl_.pp_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TokenRequest::CopyFrom(const TokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.TokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TokenRequest::InternalSwap(TokenRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tokens_.InternalSwap(&other->_impl_.tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TokenRequest, _impl_.pp_id_)
      + sizeof(TokenRequest::_impl_.pp_id_)
      - PROTOBUF_FIELD_OFFSET(TokenRequest, _impl_.ubatch_id_)>(
          reinterpret_cast<char*>(&_impl_.ubatch_id_),
          reinterpret_cast<char*>(&other->_impl_.ubatch_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[8]);
}

// ===================================================================

class TokenResponse::_Internal {
 public:
};

TokenResponse::TokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.TokenResponse)
}
TokenResponse::TokenResponse(const TokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TokenResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.TokenResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TokenResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TokenResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TokenResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[9]);
}

// ===================================================================

class UbatchFinishedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UbatchFinishedRequest>()._impl_._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

UbatchFinishedRequest::UbatchFinishedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.UbatchFinishedRequest)
}
UbatchFinishedRequest::UbatchFinishedRequest(const UbatchFinishedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UbatchFinishedRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ubatch_id_){from._impl_.ubatch_id_}
    , decltype(_impl_.pp_id_){from._impl_.pp_id_}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.UbatchFinishedRequest)
}

inline void UbatchFinishedRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ubatch_id_){arena}
    , decltype(_impl_.pp_id_){arena}
    , decltype(_impl_.rank_){0}
  };
}

UbatchFinishedRequest::~UbatchFinishedRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.UbatchFinishedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UbatchFinishedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ubatch_id_.~RepeatedField();
  _impl_.pp_id_.~RepeatedField();
}

void UbatchFinishedRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UbatchFinishedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.UbatchFinishedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ubatch_id_.Clear();
  _impl_.pp_id_.Clear();
  _impl_.rank_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UbatchFinishedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ubatch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ubatch_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ubatch_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 pp_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_pp_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_pp_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UbatchFinishedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.UbatchFinishedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  // repeated int32 ubatch_id = 2;
  for (int i = 0, n = this->_internal_ubatch_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ubatch_id(i), target);
  }

  // repeated int32 pp_id = 3;
  for (int i = 0, n = this->_internal_pp_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pp_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.UbatchFinishedRequest)
  return target;
}

size_t UbatchFinishedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.UbatchFinishedRequest)
  size_t total_size = 0;

  // required int32 rank = 1;
  if (_internal_has_rank()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ubatch_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ubatch_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_ubatch_id_size());
    total_size += data_size;
  }

  // repeated int32 pp_id = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.pp_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_pp_id_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UbatchFinishedRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UbatchFinishedRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UbatchFinishedRequest::GetClassData() const { return &_class_data_; }


void UbatchFinishedRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UbatchFinishedRequest*>(&to_msg);
  auto& from = static_cast<const UbatchFinishedRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.UbatchFinishedRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ubatch_id_.MergeFrom(from._impl_.ubatch_id_);
  _this->_impl_.pp_id_.MergeFrom(from._impl_.pp_id_);
  if (from._internal_has_rank()) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UbatchFinishedRequest::CopyFrom(const UbatchFinishedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.UbatchFinishedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UbatchFinishedRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void UbatchFinishedRequest::InternalSwap(UbatchFinishedRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ubatch_id_.InternalSwap(&other->_impl_.ubatch_id_);
  _impl_.pp_id_.InternalSwap(&other->_impl_.pp_id_);
  swap(_impl_.rank_, other->_impl_.rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UbatchFinishedRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[10]);
}

// ===================================================================

class UbatchFinishedResponse::_Internal {
 public:
};

UbatchFinishedResponse::UbatchFinishedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.UbatchFinishedResponse)
}
UbatchFinishedResponse::UbatchFinishedResponse(const UbatchFinishedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UbatchFinishedResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.UbatchFinishedResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UbatchFinishedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UbatchFinishedResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UbatchFinishedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[11]);
}

// ===================================================================

class IsReadyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IsReadyRequest>()._impl_._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IsReadyRequest::IsReadyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.IsReadyRequest)
}
IsReadyRequest::IsReadyRequest(const IsReadyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsReadyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.IsReadyRequest)
}

inline void IsReadyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){0}
  };
}

IsReadyRequest::~IsReadyRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.IsReadyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsReadyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsReadyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.IsReadyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsReadyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsReadyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.IsReadyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.IsReadyRequest)
  return target;
}

size_t IsReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.IsReadyRequest)
  size_t total_size = 0;

  // required int32 rank = 1;
  if (_internal_has_rank()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsReadyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsReadyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsReadyRequest::GetClassData() const { return &_class_data_; }


void IsReadyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsReadyRequest*>(&to_msg);
  auto& from = static_cast<const IsReadyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.IsReadyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank()) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsReadyRequest::CopyFrom(const IsReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.IsReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsReadyRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IsReadyRequest::InternalSwap(IsReadyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rank_, other->_impl_.rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsReadyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[12]);
}

// ===================================================================

class IsReadyResponse::_Internal {
 public:
};

IsReadyResponse::IsReadyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.IsReadyResponse)
}
IsReadyResponse::IsReadyResponse(const IsReadyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  IsReadyResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.IsReadyResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsReadyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsReadyResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IsReadyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[13]);
}

// ===================================================================

class IsRestartRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<IsRestartRequest>()._impl_._has_bits_);
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IsRestartRequest::IsRestartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.IsRestartRequest)
}
IsRestartRequest::IsRestartRequest(const IsRestartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsRestartRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rank_ = from._impl_.rank_;
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.IsRestartRequest)
}

inline void IsRestartRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rank_){0}
  };
}

IsRestartRequest::~IsRestartRequest() {
  // @@protoc_insertion_point(destructor:dejavu_ft.IsRestartRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsRestartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsRestartRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsRestartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dejavu_ft.IsRestartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rank_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsRestartRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 rank = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsRestartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dejavu_ft.IsRestartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 rank = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dejavu_ft.IsRestartRequest)
  return target;
}

size_t IsRestartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dejavu_ft.IsRestartRequest)
  size_t total_size = 0;

  // required int32 rank = 1;
  if (_internal_has_rank()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rank());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsRestartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsRestartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsRestartRequest::GetClassData() const { return &_class_data_; }


void IsRestartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsRestartRequest*>(&to_msg);
  auto& from = static_cast<const IsRestartRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dejavu_ft.IsRestartRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rank()) {
    _this->_internal_set_rank(from._internal_rank());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsRestartRequest::CopyFrom(const IsRestartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dejavu_ft.IsRestartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsRestartRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IsRestartRequest::InternalSwap(IsRestartRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.rank_, other->_impl_.rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsRestartRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[14]);
}

// ===================================================================

class IsRestartResponse::_Internal {
 public:
};

IsRestartResponse::IsRestartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:dejavu_ft.IsRestartResponse)
}
IsRestartResponse::IsRestartResponse(const IsRestartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  IsRestartResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dejavu_ft.IsRestartResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsRestartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsRestartResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata IsRestartResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ft_5fstate_2eproto_getter, &descriptor_table_ft_5fstate_2eproto_once,
      file_level_metadata_ft_5fstate_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dejavu_ft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dejavu_ft::ResetRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::ResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::ResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::ResetResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::ResetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::ResetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::HeartBeatRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::HeartBeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::HeartBeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::HeartBeatResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::HeartBeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::HeartBeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::StartUpInfoRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::StartUpInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::StartUpInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::StartUpInfoResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::StartUpInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::StartUpInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::CacheRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::CacheRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::CacheRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::CacheResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::CacheResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::CacheResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::TokenRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::TokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::TokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::TokenResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::TokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::TokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::UbatchFinishedRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::UbatchFinishedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::UbatchFinishedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::UbatchFinishedResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::UbatchFinishedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::UbatchFinishedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::IsReadyRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::IsReadyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::IsReadyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::IsReadyResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::IsReadyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::IsReadyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::IsRestartRequest*
Arena::CreateMaybeMessage< ::dejavu_ft::IsRestartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::IsRestartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dejavu_ft::IsRestartResponse*
Arena::CreateMaybeMessage< ::dejavu_ft::IsRestartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dejavu_ft::IsRestartResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
